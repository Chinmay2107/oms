<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="create" noun="OrderItemInventoryReservation">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="productId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
            <parameter name="facilityId" required="true"/>
            <parameter name="locationSeqId"/>
        </in-parameters>
        <actions>
            <service-call name="co.hotwax.oms.product.ProductServices.findOrCreate#FacilityInventoryItem" in-map="[productId: productId,
                          facilityId: facilityId]"
                          out-map="findOrCreateResult"/>

            <set field="inventoryItemId" from="findOrCreateResult.inventoryItemId"/>

            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="orderItemShipGroup">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="shipGroupSeqId" from="shipGroupSeqId"/>
            </entity-find-one>

            <if condition="!orderItemShipGroup">
                <return error="true" message="Order item ship group not found for orderId [${orderId}] and shipGroupSeqId [${shipGroupSeqId}]"/>
            </if>
            <set field="userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <set field="orderItemShipGrpInvRes" type="NewMap" from="[
                orderId: orderId,
                orderItemSeqId: orderItemSeqId,
                shipGroupSeqId: orderItemShipGroup.shipGroupSeqId,
                inventoryItemId: inventoryItemId,
                quantity: quantity,
                userLogin: userLogin
            ]"/>

            <service-call name="create#org.apache.ofbiz.order.order.OrderItemShipGrpInvRes" in-map="orderItemShipGrpInvRes"/>

            <set field="inventoryItemDetail" type="NewMap" from="[
                inventoryItemId: inventoryItemId,
                orderId: orderId,
                orderItemSeqId: orderItemSeqId,
                shipGroupSeqId: orderItemShipGroup.shipGroupSeqId,
                availableToPromiseDiff: -quantity,
                userLogin: ec.user.getUsername()?:ec.user.getUserId()
            ]"/>

            <service-call name="create#org.apache.ofbiz.product.inventory.InventoryItemDetail" in-map="InventoryItemDetailMap"/>
        </actions>
    </service>

    <service verb="cancel" noun="OrderItemInventoryReservation">
        <description>Cancel inventory reservations for an order item.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="shipGroupSeqId" required="true"/>
            <parameter name="cancelQuantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.product.inventory.InventoryItem" value-field="inventoryItem">
                <field-map field-name="inventoryItemId" from="inventoryItemId"/>
            </entity-find-one>

            <set field="userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>

            <if condition="inventoryItem">
                <set field="createDetailMap" type="NewMap" from="[:]"/>
                <set field="createDetailMap.inventoryItemId" from="inventoryItem.inventoryItemId"/>
                <set field="createDetailMap.orderId" from="orderId"/>
                <set field="createDetailMap.orderItemSeqId" from="orderItemSeqId"/>
                <set field="createDetailMap.shipGroupSeqId" from="shipGroupSeqId"/>
                <set field="createDetailMap.availableToPromiseDiff" from="cancelQuantity"/>
                <set field="createDetailMap.userLogin" from="userLogin"/>

                <service-call name="create#org.apache.ofbiz.product.inventory.InventoryItemDetail" in-map="createDetailMap"/>
            </if>

            <service-call name="delete#org.apache.ofbiz.order.order.OrderItemShipGrpInvRes" in-map="[orderId: orderId,
                orderItemSeqId: orderItemSeqId,
                shipGroupSeqId: shipGroupSeqId,
                userLogin: userLogin]"/>
        </actions>
    </service>

    <service verb="reject" noun="OrderItems">
        <in-parameters>
            <parameter name="rejectOrderItems" required="true" type="List"/>
        </in-parameters>
        <actions>
            <script>
                import org.moqui.entity.EntityDynamicView;
                import org.moqui.entity.EntityValue;
                import org.moqui.entity.EntityCondition;
                import org.moqui.entity.EntityConditionFactory;

                rejectOrderItems.each { rejectOrderItem ->

                def orderId = rejectOrderItem.orderId
                def orderItemSeqId = rejectOrderItem.orderItemSeqId
                def productId = rejectOrderItem.productId
                def facilityId = rejectOrderItem.facilityId
                def rejectToFacilityId = rejectOrderItem.rejectToFacilityId
                def updateQOH = rejectOrderItem.updateQOH
                def rejectionReasonId = rejectOrderItem.rejectionReasonId
                def maySplit = rejectOrderItem.maySplit ?: 'N'
                def cascadeRejectByProduct = rejectOrderItem.cascadeRejectByProduct ?: 'N'
                def comments = rejectOrderItem.comments


                def entityFind = ec.entity.find("org.apache.ofbiz.order.order.OrderItem");

                EntityDynamicView dynamicView = entityFind.makeEntityDynamicView();

                // Add member entities
                dynamicView.addMemberEntity("OI", "org.apache.ofbiz.order.order.OrderItem", null, null, null);
                dynamicView.addMemberEntity("OISG", "org.apache.ofbiz.order.order.OrderItemShipGroup", "OI", false,
                ["orderId": "orderId"]);
                dynamicView.addMemberEntity("OS", "org.apache.ofbiz.order.order.OrderShipment", "OI", true,
                ["orderId": "orderId"]);
                dynamicView.addMemberEntity("S", "org.apache.ofbiz.shipment.shipment.Shipment", "OS", true,
                ["shipmentId": "shipmentId"]);


                dynamicView.addAlias("OI", "orderId");
                dynamicView.addAlias("OI", "orderItemSeqId");
                dynamicView.addAlias("OI", "productId");
                dynamicView.addAlias("S", "shipmentStatusId","statusId",null);
                dynamicView.addAlias("OISG", "facilityId","facilityId",null);
                dynamicView.addAlias("OI", "itemStatusId","statusId",null);


                entityFind.condition("facilityId", facilityId);
                entityFind.condition("itemStatusId", "ITEM_APPROVED");

                // Add filter based on maySplit and cascadeRejectByProduct
                if (maySplit) {
                if (cascadeRejectByProduct) {
                entityFind.condition("productId", productId);
                }
                else {
                entityFind.condition("orderId", orderId);
                entityFind.condition("orderItemSeqId", orderItemSeqId);
                }
                }
                else {
                if (cascadeRejectByProduct) {
                entityFind.condition("product", productId);
                }
                else {
                entityFind.condition("orderId", orderId);
                }
                }

                // Add shipment status condition (common for all cases)
                EntityConditionFactory conditionFactory = entityFind.efi.conditionFactory;

                entityFind.condition(conditionFactory.makeCondition(
                conditionFactory.makeCondition("shipmentStatusId", EntityCondition.ComparisonOperator.IN,
                ["SHIPMENT_INPUT", "SHIPMENT_APPROVED"]),
                EntityCondition.JoinOperator.OR,
                conditionFactory.makeCondition("shipmentStatusId", EntityCondition.ComparisonOperator.EQUALS, null)
                ));

                List&lt;EntityValue&gt; orderItemsToReject = entityFind.list();

                orderItemsToReject.each { itemToReject ->
                ec.service.sync().name("co.hotwax.oms.order.OrderServices.reject#OrderItem")
                .parameter("orderId", itemToReject.orderId)
                .parameter("orderItemSeqId", itemToReject.orderItemSeqId)
                .parameter("rejectionReasonId", rejectionReasonId)
                .parameter("rejectComments", comments)
                .parameter("facilityId", facilityId)
                .parameter("rejectToFacilityId", rejectToFacilityId)
                .parameter("updateQOH", updateQOH)
                .call()
                }
                }
            </script>
        </actions>
    </service>

    <service verb="reject" noun="OrderItem">
        <description>Service to reject an order item with various identification methods and record variance details.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="facilityId" required="true"/>
            <parameter name="rejectToFacilityId" default-value="REJECTED_ITM_PARKING"/>
            <parameter name="recordVariance" default-value="Y"/>
            <parameter name="updateQOH" default-value="false" type="Boolean"/>
            <parameter name="rejectionReasonId" required="true"/>
            <parameter name="rejectComments" />
            <parameter name="shipmentId"/>
            <parameter name="shipmentItemSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="cancelledReservations" type="Map"/>
        </out-parameters>
        <actions>

            <!--            Check for shipment rejection -->
            <if condition="shipmentId &amp;&amp; shipmentItemSeqId">

                <!--Fetch the Shipment record using shipmentId.-->
                <entity-find-one entity-name="org.apache.ofbiz.shipment.shipment.Shipment" value-field="shipment">
                    <field-map field-name="shipmentId"/>
                </entity-find-one>
                <if condition="!shipment">
                    <return error="true" message="Not a valid shipment: Shipment with ${shipmentId} does not exist"/>
                </if>

                <if condition="!shipment.statusId.equals('SHIPMENT_INPUT')">
                    <service-call name="co.hotwax.poorti.FulfillmentServices.reinitialize#Shipment"
                                  in-map="[shipmentId:shipmentId]"/>
                </if>

                <entity-find entity-name="org.apache.ofbiz.shipment.shipment.ShipmentPackageContent" list="shipmentPackageContentList">
                    <econdition field-name="shipmentId"/>
                    <econdition field-name="shipmentItemSeqId"/>
                </entity-find>

                <set field="shipmentPackageContent" from="shipmentPackageContentList[0]"/>

                <!--            delete shipmentContent -->
                <service-call name="delete#org.apache.ofbiz.shipment.shipment.ShipmentPackageContent"
                              in-map="shipmentPackageContent"/>

                <!--            delete shipmentItem -->
                <service-call name="delete#org.apache.ofbiz.shipment.shipment.ShipmentItem"
                              in-map="[shipmentId:shipmentId,shipmentItemSeqId:shipmentItemSeqId]"/>

                <set field="facilityId" from="shipment?.originFacilityId"/>

                <!--Query Order Shipment to get order related details from this shipment-->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderShipment" list="orderShipmentList">
                    <econdition field-name="shipmentId"/>
                    <econdition field-name="shipmentItemSeqId"/>
                    <econdition field-name="orderId"/>
                </entity-find>

                <set field="orderShipment" from="orderShipmentList[0]"/>

                <service-call name="co.hotwax.poorti.FulfillmentServices.update#OrderItemFulfillmentStatus"
                              in-map="[orderId:orderShipment.orderId,orderItemSeqId:orderShipment.orderItemSeqId,fulfillmentStatus:'']"/>

                <!--            delete orderShipment -->
                <service-call name="delete#org.apache.ofbiz.order.order.OrderShipment"
                              in-map="orderShipment"/>
            </if>

            <!--Fetch shipGroupSeqId before processing anything -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" list="currentShipGroup" >
                <econdition field-name="orderId" from="orderId"/>
            </entity-find>

            <set field="shipGroupSeqId" from="currentShipGroup[0].shipGroupSeqId"/>

            <!--1. Cancel Inventory Reservation call cancel#OrderItemShipGrpInvRes -->
            <service-call name="co.hotwax.oms.order.OrderServices.cancel#OrderItemInventoryReservation" in-map="[orderId:orderId,
            orderItemSeqId:orderItemSeqId,shipGroupSeqId:shipGroupSeqId,cancelQuantity:1]"/>

            <!--2. Move to rejected facility-->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="currentShipGroup">
                <field-map field-name="shipGroupSeqId"/>
                <field-map field-name="orderId" />
            </entity-find-one>
            <set field="currentShipGroup.facilityId" from="rejectToFacilityId"/>
            <service-call name="update#org.apache.ofbiz.order.order.OrderItemShipGroup" in-map="currentShipGroup"/>

            <!--3. Call create order facility change-->
            <set field="orderFacilityChangeMap"  type="NewMap" from="[:]"/>
            <set field="orderFacilityChangeMap.orderId" from="orderId"/>
            <set field="orderFacilityChangeMap.facilityId" from="rejectToFacilityId"/>
            <set field="orderFacilityChangeMap.fromFacilityId" from="facilityId"/>
            <set field="orderFacilityChangeMap.shipmentMethodTypeId" value="STANDARD"/>
            <set field="orderFacilityChangeMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="orderFacilityChangeMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="orderFacilityChangeMap.changeReasonEnumId" from="rejectionReasonId"/>
            <set field="orderFacilityChangeMap.changeUserLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <set field="orderFacilityChangeMap.changeDatetime" from="ec.user.nowTimestamp"/>
            <set field="orderFacilityChangeMap.comments" from="rejectComments"/>
            <set field="orderFacilityChangeMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <service-call name="create#co.hotwax.facility.OrderFacilityChange" in-map="orderFacilityChangeMap"/>

            <!--4. createUpdateExternalFulfillmentOrderItem-->
            <set field="createUpdateExternalFulfillmentOrderItemMap"  type="NewMap" from="[:]"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.orderId" from="orderId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.fulfillmentStatus" value="REJECT"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <service-call name="create#co.hotwax.integration.order.ExternalFulfillmentOrderItem" in-map="createUpdateExternalFulfillmentOrderItemMap"/>

            <!--5. createOrderHistory-->
            <set field="orderHistoryMap"  type="NewMap" from="[:]"/>
            <set field="orderHistoryMap.orderId" from="orderId"/>
            <set field="orderHistoryMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="orderHistoryMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="orderHistoryMap.eventTypeEnumId" from="ITEM_BKD_REJECTED"/>
            <set field="orderHistoryMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <service-call name="create#co.hotwax.customerservice.order.OrderHistory" in-map="orderHistoryMap"/>

            <!--6. Record inventory variance-->
            <entity-find-one entity-name="org.apache.ofbiz.common.enum.Enumeration" value-field="enumMap" cache="true">
                <field-map field-name="enumId" from="rejectionReasonId"/>
            </entity-find-one>

            <set field="enumType" from="enumMap.enumTypeId"/>
            <set field="varianceQuantity" value="0" type="BigDecimal"/>

            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="itemSeqId"/>
            </entity-find-one>

            <if condition="enumType.equals('REPORT_NO_VAR')">
                <return message="Rejection reason is not eligible for setting variance"/>
            </if>

            <if condition="enumType.equals('REPORT_VAR')">
                <set field="varianceQuantity" value="1" type="BigDecimal"/>
            </if>

            <if condition="enumType.equals('REPORT_ALL_VAR')">
                <entity-find-one entity-name="org.apache.ofbiz.product.facility.ProductFacility" value-field="productFacility">
                    <field-map field-name="productId" from="orderItem.productId"/>
                    <field-map field-name="facilityId" from="facilityId"/>
                </entity-find-one>

                <set field="varianceQuantity" from="productFacility.lastInventoryCount" type="BigDecimal"/>
            </if>

            <entity-find entity-name="org.apache.ofbiz.product.inventory.ProductFacilityInventoryItemView" list="productFacilityInventoryItemViews">
                <econdition field-name="productId" from="orderItem.productId"/>
                <econdition field-name="facilityId" from="facilityId"/>
                <econdition field-name="availableToPromise" operator="greater" value="0"/>
            </entity-find>

            <set field="productFacilityInventoryItemView" from="productFacilityInventoryItemViews[0]"/>

            <set field="availableToPromiseVar" type="BigDecimal" from="productFacilityInventoryItemView.availableToPromise"/>
            <if condition="varianceQuantity!=null">
                <if condition="availableToPromiseVar >= varianceQuantity ">
                    <then>
                        <set field="availableToPromiseVar" type="BigDecimal" from="varianceQuantity"/>
                        <set field="varianceQuantity" type="BigDecimal" value="0"/>
                    </then>
                    <else>
                        <!--                        Variance is greater than atp, what to do ?  Second pass ? -->
                        <set field="varianceQuantity" type="BigDecimal" from="varianceQuantity.subtract(availableToPromiseVar)"/>
                    </else>
                </if>
            </if>
            <!--Run the code to record variance -->

            <!--                These details go in a map placed inside 'inventoryItemVariances' list -->
            <set field="inventoryItemVariances"  type="NewList" from="[]"/>
            <set field="inventoryItemVarianceMap"  type="NewMap" from="[:]"/>
            <set field="inventoryItemVarianceMap.inventoryItemId" from="productFacilityInventoryItemView.inventoryItemId"/>
            <set field="inventoryItemVarianceMap.varianceReasonId" from="rejectionReasonId"/>
            <set field="inventoryItemVarianceMap.comments" from="rejectComments"/>
            <set field="inventoryItemVarianceMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <set field="inventoryItemVarianceMap.availableToPromiseVar" from="availableToPromiseVar.negate()"/>

            <if condition="updateQOH">
                <set field="inventoryItemVarianceMap.quantityOnHandVar" from="availableToPromiseVar.negate()"/>
            </if>

            <script>
                inventoryItemVariances.add(inventoryItemVarianceMap)
            </script>

            <!--                These go in top level Map - createPhysicalInventoryMap -->
            <set field="createPhysicalInventoryMap"  type="NewMap" from="[:]"/>
            <set field="createPhysicalInventoryMap.physicalInventoryDate" from="ec.user.nowTimestamp" />
            <set field="createPhysicalInventoryMap.partyId" from="ec.user.getUsername()?:ec.user.getUserId().partyId" />
            <set field="createPhysicalInventoryMap.inventoryItemVariances" from="inventoryItemVariances" />

            <!--                Call create Physical Inventory -->
            <service-call name="co.hotwax.poorti.FulfillmentServices.create#PhysicalInventory" in-map="createPhysicalInventoryMap" out-map="result"/>

        </actions>
    </service>

    <service verb="findOrCreate" noun="OrderItemShipGroup">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="facilityId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemShipGroup" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" list="orderItemShipGroups" cache="true">
                <econdition field-name="orderId" from="orderId"/>
                <econdition field-name="facilityId" from="facilityId"/>
                <order-by field-name="shipGroupSeqId DESC"/>
            </entity-find>

            <if condition="orderItemShipGroups">
                <set field="orderItemShipGroup" from="orderItemShipGroups[0]"/>
                <else>
                    <!--                    No need to generate nextseqId
                                        <set field="shipGroupSeqId" from="ec.nextSeqId('OrderItemShipGroup')"/>-->
                    <set field="orderItemShipGroupMap" type="NewMap" from="[
              orderId: orderId,
              shipGroupSeqId: shipGroupSeqId,
              facilityId: facilityId,
              userLogin: ec.user.getUsername()?:ec.user.getUserId()
          ]"/>
                    <service-call name="update#org.apache.ofbiz.order.order.OrderItemShipGroup" in-map="orderItemShipGroup"/>
                </else>
            </if>
        </actions>
    </service>
</services>