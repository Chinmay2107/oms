<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="OrderItemSalesTaxTotal">
        <description>Get the sales tax total for an order item</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="itemTaxTotal" required="true" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- Validate the order item -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>
            <if condition="!orderItem">
                <return type="warning" message="OrderItem [ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <set field="itemTaxTotal" from="0.0"/>

            <!-- Get the sales tax total for order item using the OrderAdjustment entity -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderAdjustment" list="orderAdjustments">
                <econdition field-name="orderId" from="orderId"/>
                <econdition field-name="orderItemSeqId" from="orderItemSeqId"/>
                <econdition field-name="orderAdjustmentTypeId" value="SALES_TAX"/>
                <select-field field-name="amount"/>
            </entity-find>
            <if condition="!orderAdjustments">
                <!-- If no sales tax adjustments are found then return -->
                <return type="info" message="Sales Tax OrderAdjustment [ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <!-- Get the sales tax total amount by adding each adjustment's amount -->
            <iterate list="orderAdjustments" entry="orderAdjustment">
                <set field="itemTaxTotal" from="itemTaxTotal.add(orderAdjustment.amount)"/>
            </iterate>
        </actions>
    </service>

    <service verb="cancel" noun="OrderItemInvResQty" authenticate="anonymous-all">
        <description>Cancel inventory reservation for an order item</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="shipGroupSeqId" required="true"/>
        </in-parameters>
        <actions>
            <!-- Find all the reservation records from the OrderItemShipGrpInvRes entity -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGrpInvRes" list="oisgirs">
                <econdition field-name="orderId" from="orderId"/>
                <econdition field-name="orderItemSeqId" from="orderItemSeqId"/>
                <econdition field-name="shipGroupSeqId" from="shipGroupSeqId"/>
            </entity-find>

            <if condition="!oisgirs">
                <return type="info" message="Order Reservations [OrderItem ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <!-- Iterate each OISGIR record and delete it; ideally it will have 1 record-->
            <iterate list="oisgirs" entry="oisgir">
                <!-- get the inventoryItemId from the OISGIR record, so we can record the changes in InventoryItemDetail -->
                <set field="inventoryItemId" from="oisgir.inventoryItemId" />
                <entity-delete value-field="oisgir"/>

                <!-- Call create#InventoryItemDetail inline to register the inventoryItem change and mark it available for reservation -->
                <service-call name="create#org.apache.ofbiz.product.inventory.InventoryItemDetail" in-map="[inventoryItemId:inventoryItemId, effectiveDate:ec.user.nowTimestamp, quantityOnHandDiff:0, availableToPromiseDiff:1, accountingQuantityDiff:0, orderId:orderId, description: 'Cancelled item to order: ' + orderId + ', item: ' + orderItemSeqId]"/>
            </iterate>

        </actions>
    </service>

    <service verb="change" noun="OrderItemStatus">
        <description>Change the status of a sales order item</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="statusId" required="true"/>
            <parameter name="changeReason"/>
            <parameter name="statusDateTime"/>
            <parameter name="checkCancelCompleteOrder" type="Boolean" default-value="true"/>
        </in-parameters>
        <actions>
            <!-- Get the order item -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>
            <!-- Log and return with error if order item doesn't exist -->
            <if condition="!orderItem">
                <return type="warning" message="OrderItem [ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <!-- Update the status of the order item -->
            <set field="orderItemMap" from="orderItem"/>
            <set field="orderItemMap.statusId" from="statusId"/>
            <service-call name="update#org.apache.ofbiz.order.order.OrderItem" in-map="orderItemMap"/>

            <if condition="!statusDateTime">
                <set field="statusDateTime" from="ec.user.nowTimestamp"/>
            </if>
            <!-- Call create#OrderStatus to register the order item cancellation status change event-->
            <service-call name="create#org.apache.ofbiz.order.order.OrderStatus" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId,
                    statusId:statusId, changeReason:changeReason, statusDatetime:statusDateTime, statusUserLogin:ec.user.getUsername()]"/>

            <!-- Check if the statusId is ITEM_CANCELLED or ITEM_COMPLETED when checkCancelCompleteOrder is true-->
            <if condition="checkCancelCompleteOrder">
                <if condition="orderItem.statusId == 'ITEM_CANCELLED' || orderItem.statusId == 'ITEM_COMPLETED'">
                    <!-- Call checkCancelComplete#Order service to confirm if we need to completely cancel or complete the sales order -->
                    <service-call name="co.hotwax.oms.order.OrderServices.checkCancelComplete#Order" in-map="[orderId:orderId, changeReason:changeReason]"/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="checkCancelComplete" noun="Order">
        <description>This service checks if we need to completely cancel or complete a sales order.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="changeReason"/>
        </in-parameters>
        <out-parameters>
            <parameter name="oldStatusId"/>
            <parameter name="statusChanged" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="statusChanged" type="Boolean" value="false"/>
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/>
            </entity-find>
            <if condition="!orderItemList">
                <return type="warning" message="OrderItem [ID: ${orderId}] - Not found"/>
            </if>

            <set field="allCancelled" type="Boolean" value="true"/>
            <set field="anyCompleted" type="Boolean" value="false"/>
            <set field="allCancelledOrCompleted" type="Boolean" value="true"/>
            <iterate list="orderItemList" entry="curOrderItem">
                <if condition="curOrderItem.statusId in ['ITEM_REJECTED', 'ITEM_CANCELLED']"><continue/></if>
                <if condition="curOrderItem.statusId == 'ITEM_COMPLETED'">
                    <set field="allCancelled" type="Boolean" value="false"/>
                    <set field="anyCompleted" type="Boolean" value="true"/>
                    <continue/>
                </if>
                <set field="allCancelled" type="Boolean" value="false"/>
                <set field="allCancelledOrCompleted" type="Boolean" value="false"/>
            </iterate>
            <if condition="allCancelled">
                <then>
                    <service-call name="co.hotwax.oms.order.OrderServices.change#OrderStatus" out-map="context" in-map="[orderId:orderId, setItemStatus:false, statusId:'ORDER_CANCELLED']"/>
                </then>
                <else-if condition="anyCompleted &amp;&amp; allCancelledOrCompleted">
                    <service-call name="co.hotwax.oms.order.OrderServices.change#OrderStatus" out-map="context" in-map="[orderId:orderId, setItemStatus:false, statusId:'ORDER_COMPLETED']"/>
                </else-if>
            </if>
        </actions>
    </service>

    <service verb="change" noun="OrderStatus">
        <description>This service validates and then changes the status of a sales order</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="statusId" required="true"/>
            <parameter name="changeReason"/>
            <parameter name="setItemStatus" type="Boolean" default-value="false"/>
        </in-parameters>
        <actions>
            <!-- Validate the orderHeader record -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader" value-field="orderHeader">
                <field-map field-name="orderId" from="orderId"/>
            </entity-find-one>
            <if condition="!orderHeader">
                <return type="warning" message="OrderHeader [ID: ${orderId}] - Not found"/>
            </if>

            <!-- Check if statusId is a valid status -->
            <entity-find-one entity-name="moqui.basic.StatusItem" value-field="statusItem" cache="true">
                <field-map field-name="statusId" from="statusId"/>
            </entity-find-one>
            <if condition="!statusItem">
                <return type="warning" message="StatusItem [ID: ${statusId}] - Not found"/>
            </if>

            <!-- Update the status of the OrderHeader -->
            <set field="orderHeaderMap" from="orderHeader"/>
            <set field="orderHeaderMap.statusId" from="statusId"/>
            <service-call name="update#org.apache.ofbiz.order.order.OrderHeader" in-map="orderHeaderMap" />

            <!-- Create OrderStatus record to register the status change -->
            <service-call name="create#org.apache.ofbiz.order.order.OrderStatus" in-map="[orderId:orderId, statusId:statusId, changeReason:changeReason, statusDatetime:ec.user.nowTimestamp, statusUserLogin:ec.user.getUsername()]"/>

            <if condition="setItemStatus">
                <!-- If setItemStatus is true then get all the order items -->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItemList">
                    <econdition field-name="orderId" from="orderId"/>
                </entity-find>
                <!-- Iterate through the order items and call change#OrderItemStatus service to update their status as well -->
                <iterate list="orderItemList" entry="orderItem">
                    <service-call name="co.hotwax.oms.order.OrderServices.change#OrderItemStatus" in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId, statusId:statusId, changeReason:changeReason, statusDateTime:ec.user.nowTimestamp]"/>
                </iterate>
            </if>
        </actions>
    </service>

    <service verb="find" noun="OrderItemShipGroup">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="facilityId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipGroupSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.product.facility.Facility" value-field="facility" cache="true"/>
            <service-call name="co.hotwax.oms.common.CommonServices.check#ParentType"
                          in-map="[entityName: 'org.apache.ofbiz.product.facility.FacilityType',
                                primaryKey: 'facilityTypeId',
                                childType: facility.facilityTypeId,
                                parentTypeField: 'parentTypeId',
                                parentType: 'VIRTUAL_FACILITY']" out-map="outResult"/>
            <!-- Since a new ShipGroup is created for each routing attempt,
                 reuse the existing ShipGroup only if the facility type is "virtual".
                Additionally, filtering based on the shipment method type may be required in future.
            -->
            <if condition="outResult.hasParentType">
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" list="orderItemShipGroups">
                    <econdition field-name="orderId" from="orderId"/>
                    <econdition field-name="facilityId" from="facilityId"/>
                    <order-by field-name="shipGroupSeqId DESC"/>
                </entity-find>
                <if condition="orderItemShipGroups">
                    <set field="orderItemShipGroup" from="orderItemShipGroups[0]"/>
                    <set field="shipGroupSeqId" from="orderItemShipGroup.shipGroupSeqId"/>
                    <return/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="reject" noun="OrderItems">
        <in-parameters>
            <parameter name="rejectOrderItems" required="true" type="List"/>
        </in-parameters>
        <actions>
            <script>
                import org.moqui.entity.EntityDynamicView;
                import org.moqui.entity.EntityValue;
                import org.moqui.entity.EntityCondition;
                import org.moqui.entity.EntityConditionFactory;

                rejectOrderItems.each { rejectOrderItem ->

                def orderId = rejectOrderItem.orderId
                def orderItemSeqId = rejectOrderItem.orderItemSeqId
                def productId = rejectOrderItem.productId
                def facilityId = rejectOrderItem.facilityId
                def rejectToFacilityId = rejectOrderItem.rejectToFacilityId
                def updateQOH = rejectOrderItem.updateQOH
                def rejectionReasonId = rejectOrderItem.rejectionReasonId
                def maySplit = rejectOrderItem.maySplit ?: 'N'
                def cascadeRejectByProduct = rejectOrderItem.cascadeRejectByProduct ?: 'N'
                def comments = rejectOrderItem.comments


                def entityFind = ec.entity.find("org.apache.ofbiz.order.order.OrderItem");

                EntityDynamicView dynamicView = entityFind.makeEntityDynamicView();

                // Add member entities
                dynamicView.addMemberEntity("OI", "org.apache.ofbiz.order.order.OrderItem", null, null, null);
                dynamicView.addMemberEntity("OISG", "org.apache.ofbiz.order.order.OrderItemShipGroup", "OI", false,
                ["orderId": "orderId"]);
                dynamicView.addMemberEntity("OS", "org.apache.ofbiz.order.order.OrderShipment", "OI", true,
                ["orderId": "orderId"]);
                dynamicView.addMemberEntity("S", "org.apache.ofbiz.shipment.shipment.Shipment", "OS", true,
                ["shipmentId": "shipmentId"]);


                dynamicView.addAlias("OI", "orderId");
                dynamicView.addAlias("OI", "orderItemSeqId");
                dynamicView.addAlias("OI", "productId");
                dynamicView.addAlias("S", "shipmentStatusId","statusId",null);
                dynamicView.addAlias("OISG", "facilityId","facilityId",null);
                dynamicView.addAlias("OI", "itemStatusId","statusId",null);


                entityFind.condition("facilityId", facilityId);
                entityFind.condition("itemStatusId", "ITEM_APPROVED");

                // Add filter based on maySplit and cascadeRejectByProduct
                if (maySplit) {
                if (cascadeRejectByProduct) {
                entityFind.condition("productId", productId);
                }
                else {
                entityFind.condition("orderId", orderId);
                entityFind.condition("orderItemSeqId", orderItemSeqId);
                }
                }
                else {
                if (cascadeRejectByProduct) {
                entityFind.condition("product", productId);
                }
                else {
                entityFind.condition("orderId", orderId);
                }
                }

                // Add shipment status condition (common for all cases)
                EntityConditionFactory conditionFactory = entityFind.efi.conditionFactory;

                entityFind.condition(conditionFactory.makeCondition(
                conditionFactory.makeCondition("shipmentStatusId", EntityCondition.ComparisonOperator.IN,
                ["SHIPMENT_INPUT", "SHIPMENT_APPROVED"]),
                EntityCondition.JoinOperator.OR,
                conditionFactory.makeCondition("shipmentStatusId", EntityCondition.ComparisonOperator.EQUALS, null)
                ));

                List&lt;EntityValue&gt; orderItemsToReject = entityFind.list();

                orderItemsToReject.each { itemToReject ->
                ec.service.sync().name("co.hotwax.oms.impl.OrderReservationServices.reject#OrderItem")
                .parameter("orderId", itemToReject.orderId)
                .parameter("orderItemSeqId", itemToReject.orderItemSeqId)
                .parameter("rejectionReasonId", rejectionReasonId)
                .parameter("rejectComments", comments)
                .parameter("facilityId", facilityId)
                .parameter("rejectToFacilityId", rejectToFacilityId)
                .parameter("updateQOH", updateQOH)
                .call()
                }
                }
            </script>
        </actions>
    </service>

    <service verb="reject" noun="OrderItem">
        <description>Service to reject an order item with various identification methods and record variance details.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="facilityId" required="true"/>
            <parameter name="rejectToFacilityId" default-value="REJECTED_ITM_PARKING"/>
            <parameter name="recordVariance" default-value="Y"/>
            <parameter name="updateQOH" default-value="false" type="Boolean"/>
            <parameter name="rejectionReasonId" required="true"/>
            <parameter name="rejectComments" />
            <parameter name="shipmentId"/>
            <parameter name="shipmentItemSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="cancelledReservations" type="Map"/>
        </out-parameters>
        <actions>

            <!--            Check for shipment rejection -->
            <if condition="shipmentId &amp;&amp; shipmentItemSeqId">

                <!--Fetch the Shipment record using shipmentId.-->
                <entity-find-one entity-name="org.apache.ofbiz.shipment.shipment.Shipment" value-field="shipment">
                    <field-map field-name="shipmentId"/>
                </entity-find-one>
                <if condition="!shipment">
                    <return error="true" message="Not a valid shipment: Shipment with ${shipmentId} does not exist"/>
                </if>

                <if condition="!shipment.statusId.equals('SHIPMENT_INPUT')">
                    <service-call name="co.hotwax.poorti.FulfillmentServices.reinitialize#Shipment"
                                  in-map="[shipmentId:shipmentId]"/>
                </if>

                <entity-find entity-name="org.apache.ofbiz.shipment.shipment.ShipmentPackageContent" list="shipmentPackageContentList">
                    <econdition field-name="shipmentId"/>
                    <econdition field-name="shipmentItemSeqId"/>
                </entity-find>

                <set field="shipmentPackageContent" from="shipmentPackageContentList[0]"/>

                <!--            delete shipmentContent -->
                <service-call name="delete#org.apache.ofbiz.shipment.shipment.ShipmentPackageContent"
                              in-map="shipmentPackageContent"/>

                <!--            delete shipmentItem -->
                <service-call name="delete#org.apache.ofbiz.shipment.shipment.ShipmentItem"
                              in-map="[shipmentId:shipmentId,shipmentItemSeqId:shipmentItemSeqId]"/>

                <set field="facilityId" from="shipment?.originFacilityId"/>

                <!--Query Order Shipment to get order related details from this shipment-->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderShipment" list="orderShipmentList">
                    <econdition field-name="shipmentId"/>
                    <econdition field-name="shipmentItemSeqId"/>
                    <econdition field-name="orderId"/>
                </entity-find>

                <set field="orderShipment" from="orderShipmentList[0]"/>

                <service-call name="co.hotwax.poorti.FulfillmentServices.update#OrderItemFulfillmentStatus"
                              in-map="[orderId:orderShipment.orderId,orderItemSeqId:orderShipment.orderItemSeqId,fulfillmentStatus:'']"/>

                <!--            delete orderShipment -->
                <service-call name="delete#org.apache.ofbiz.order.order.OrderShipment"
                              in-map="orderShipment"/>
            </if>

            <!--Fetch shipGroupSeqId before processing anything -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" list="currentShipGroup" >
                <econdition field-name="orderId" from="orderId"/>
            </entity-find>

            <set field="shipGroupSeqId" from="currentShipGroup[0].shipGroupSeqId"/>

            <!--1. Cancel Inventory Reservation call cancel#OrderItemShipGrpInvRes -->
            <service-call name="co.hotwax.oms.impl.OrderReservationServices.cancel#OrderItemInventoryReservation" in-map="[orderId:orderId,
            orderItemSeqId:orderItemSeqId,shipGroupSeqId:shipGroupSeqId,cancelQuantity:1]"/>

            <!--2. Move to rejected facility-->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="currentShipGroup">
                <field-map field-name="shipGroupSeqId"/>
                <field-map field-name="orderId" />
            </entity-find-one>
            <set field="currentShipGroup.facilityId" from="rejectToFacilityId"/>
            <service-call name="update#org.apache.ofbiz.order.order.OrderItemShipGroup" in-map="currentShipGroup"/>

            <!--3. Call create order facility change-->
            <set field="orderFacilityChangeMap" from="[:]"/>
            <set field="orderFacilityChangeMap.orderId" from="orderId"/>
            <set field="orderFacilityChangeMap.facilityId" from="rejectToFacilityId"/>
            <set field="orderFacilityChangeMap.fromFacilityId" from="facilityId"/>
            <set field="orderFacilityChangeMap.shipmentMethodTypeId" value="STANDARD"/>
            <set field="orderFacilityChangeMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="orderFacilityChangeMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="orderFacilityChangeMap.changeReasonEnumId" from="rejectionReasonId"/>
            <set field="orderFacilityChangeMap.changeUserLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <set field="orderFacilityChangeMap.changeDatetime" from="ec.user.nowTimestamp"/>
            <set field="orderFacilityChangeMap.comments" from="rejectComments"/>
            <service-call name="create#co.hotwax.facility.OrderFacilityChange" in-map="orderFacilityChangeMap"/>

            <!--4. createUpdateExternalFulfillmentOrderItem-->
            <set field="createUpdateExternalFulfillmentOrderItemMap" from="[:]"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.orderId" from="orderId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.fulfillmentStatus" value="REJECT"/>
            <service-call name="create#co.hotwax.integration.order.ExternalFulfillmentOrderItem" in-map="createUpdateExternalFulfillmentOrderItemMap"/>

            <!--5. createOrderHistory-->
            <set field="orderHistoryMap" from="[:]"/>
            <set field="orderHistoryMap.orderId" from="orderId"/>
            <set field="orderHistoryMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="orderHistoryMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="orderHistoryMap.eventTypeEnumId" from="ITEM_BKD_REJECTED"/>
            <service-call name="create#co.hotwax.customerservice.order.OrderHistory" in-map="orderHistoryMap"/>

            <!--6. Record inventory variance-->
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumMap" cache="true">
                <field-map field-name="enumId" from="rejectionReasonId"/>
            </entity-find-one>

            <set field="enumType" from="enumMap.enumTypeId"/>
            <set field="varianceQuantity" value="0" type="BigDecimal"/>

            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="itemSeqId"/>
            </entity-find-one>

            <if condition="enumType.equals('REPORT_NO_VAR')">
                <return message="Rejection reason is not eligible for setting variance"/>
            </if>

            <if condition="enumType.equals('REPORT_VAR')">
                <set field="varianceQuantity" value="1" type="BigDecimal"/>
            </if>

            <if condition="enumType.equals('REPORT_ALL_VAR')">
                <entity-find-one entity-name="org.apache.ofbiz.product.facility.ProductFacility" value-field="productFacility">
                    <field-map field-name="productId" from="orderItem.productId"/>
                    <field-map field-name="facilityId" from="facilityId"/>
                </entity-find-one>

                <set field="varianceQuantity" from="productFacility.lastInventoryCount" type="BigDecimal"/>
            </if>

            <entity-find entity-name="co.hotwax.oms.product.inventory.ProductFacilityInventoryItemView" list="productFacilityInventoryItemViews">
                <econdition field-name="productId" from="orderItem.productId"/>
                <econdition field-name="facilityId" from="facilityId"/>
                <econdition field-name="availableToPromise" operator="greater" value="0"/>
            </entity-find>

            <set field="productFacilityInventoryItemView" from="productFacilityInventoryItemViews[0]"/>

            <set field="availableToPromiseVar" type="BigDecimal" from="productFacilityInventoryItemView.availableToPromise"/>
            <if condition="varianceQuantity!=null">
                <if condition="availableToPromiseVar >= varianceQuantity ">
                    <then>
                        <set field="availableToPromiseVar" type="BigDecimal" from="varianceQuantity"/>
                        <set field="varianceQuantity" type="BigDecimal" value="0"/>
                    </then>
                    <else>
                        <!-- Variance is greater than atp, what to do ?  Second pass ? -->
                        <set field="varianceQuantity" type="BigDecimal" from="varianceQuantity.subtract(availableToPromiseVar)"/>
                    </else>
                </if>
            </if>
            <!--Run the code to record variance -->

            <!--                These details go in a map placed inside 'inventoryItemVariances' list -->
            <set field="inventoryItemVariances" from="[]"/>
            <set field="inventoryItemVarianceMap" from="[:]"/>
            <set field="inventoryItemVarianceMap.inventoryItemId" from="productFacilityInventoryItemView.inventoryItemId"/>
            <set field="inventoryItemVarianceMap.varianceReasonId" from="rejectionReasonId"/>
            <set field="inventoryItemVarianceMap.comments" from="rejectComments"/>
            <set field="inventoryItemVarianceMap.availableToPromiseVar" from="availableToPromiseVar.negate()"/>

            <if condition="updateQOH">
                <set field="inventoryItemVarianceMap.quantityOnHandVar" from="availableToPromiseVar.negate()"/>
            </if>

            <script>
                inventoryItemVariances.add(inventoryItemVarianceMap)
            </script>

            <!--                These go in top level Map - createPhysicalInventoryMap -->
            <set field="createPhysicalInventoryMap" from="[:]"/>
            <set field="createPhysicalInventoryMap.physicalInventoryDate" from="ec.user.nowTimestamp" />
            <set field="createPhysicalInventoryMap.partyId" from="ec.user.getUsername()?:ec.user.getUserId().partyId" />
            <set field="createPhysicalInventoryMap.inventoryItemVariances" from="inventoryItemVariances" />

            <!--                Call create Physical Inventory -->
            <service-call name="co.hotwax.poorti.FulfillmentServices.create#PhysicalInventory" in-map="createPhysicalInventoryMap" out-map="result"/>

        </actions>
    </service>
</services>
