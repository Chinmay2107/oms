<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="create" noun="OrderItemInventoryReservation">
        <description>
            This service creates an InventoryItemDetail record only for the specified order and item with the given quantity at the specified facility.
            It also creates OrderItemShipGroupInventoryReservation records but does not perform any additional inventory adjustments or processing.
        </description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
            <parameter name="facilityId" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO: Handle marketing package reservation: MARKETING_PKG_PICK
                Reserve marketing package component against the marketing packet order item
             -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>
            <if condition="!orderItem">
                <return error="true" message="Order item [${orderId}:${orderItemSeqId}] not found."/>
            </if>
            <service-call name="co.hotwax.oms.product.ProductServices.findOrCreate#FacilityInventoryItem"
                          in-map="[productId: orderItem.productId, facilityId: facilityId]"
                          out-map="findOrCreateResult"/>

            <set field="inventoryItemId" from="findOrCreateResult.inventoryItemId"/>
            <set field="orderItemShipGrpInvRes" from="[
                orderId: orderId,
                orderItemSeqId: orderItemSeqId,
                shipGroupSeqId: orderItem.shipGroupSeqId,
                inventoryItemId: inventoryItemId,
                quantity: quantity,
                reservedDatetime: ec.user.nowTimestamp
            ]"/>

            <service-call name="create#org.apache.ofbiz.order.order.OrderItemShipGrpInvRes"
                          in-map="orderItemShipGrpInvRes"/>

            <set field="inventoryItemDetail" from="[
                inventoryItemId: inventoryItemId,
                orderId: orderId,
                orderItemSeqId: orderItemSeqId,
                shipGroupSeqId: orderItem.shipGroupSeqId,
                availableToPromiseDiff: quantity.negate(),
                effectiveDate: ec.user.nowTimestamp
            ]"/>
            <service-call name="co.hotwax.oms.product.InventoryServices.create#InventoryItemDetail"
                          in-map="inventoryItemDetail"/>
        </actions>
    </service>

    <service verb="cancel" noun="OrderItemInventoryReservation">
        <description>Cancel inventory reservations for an order item.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="cancelQuantity" type="BigDecimal" required="true" default-value="1"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="co.hotwax.order.OrderItemAndShipGroup" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>
            <!--TODO: Handle marketing package scenario -->
            <service-call name="co.hotwax.oms.product.ProductServices.findOrCreate#FacilityInventoryItem"
                          in-map="[productId: orderItem.productId, facilityId: orderItem.facilityId]"
                          out-map="findOrCreateResult"/>

            <set field="inventoryItemId" from="findOrCreateResult.inventoryItemId"/>

            <set field="createDetailMap" from="[:]"/>
            <set field="createDetailMap.inventoryItemId" from="inventoryItemId"/>
            <set field="createDetailMap.orderId" from="orderId"/>
            <set field="createDetailMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="createDetailMap.shipGroupSeqId" from="orderItem.shipGroupSeqId"/>
            <set field="createDetailMap.effectiveDate" from="ec.user.nowTimestamp"/>
            <set field="createDetailMap.availableToPromiseDiff" from="cancelQuantity"/>

            <service-call name="co.hotwax.oms.product.InventoryServices.create#InventoryItemDetail" in-map="createDetailMap"/>

            <service-call name="delete#org.apache.ofbiz.order.order.OrderItemShipGrpInvRes"
                        in-map="[orderId: orderId,
                        orderItemSeqId: orderItemSeqId,
                        inventoryItemId: inventoryItemId,
                        shipGroupSeqId: orderItem.shipGroupSeqId]"/>
        </actions>
    </service>

    <service verb="reject" noun="OrderItems">
        <in-parameters>
            <parameter name="rejectOrderItems" required="true" type="List"/>
        </in-parameters>
        <actions>
            <script>
                import org.moqui.entity.EntityDynamicView;
                import org.moqui.entity.EntityValue;
                import org.moqui.entity.EntityCondition;
                import org.moqui.entity.EntityConditionFactory;

                rejectOrderItems.each { rejectOrderItem ->

                def orderId = rejectOrderItem.orderId
                def orderItemSeqId = rejectOrderItem.orderItemSeqId
                def productId = rejectOrderItem.productId
                def facilityId = rejectOrderItem.facilityId
                def rejectToFacilityId = rejectOrderItem.rejectToFacilityId
                def updateQOH = rejectOrderItem.updateQOH
                def rejectionReasonId = rejectOrderItem.rejectionReasonId
                def maySplit = rejectOrderItem.maySplit ?: 'N'
                def cascadeRejectByProduct = rejectOrderItem.cascadeRejectByProduct ?: 'N'
                def comments = rejectOrderItem.comments


                def entityFind = ec.entity.find("org.apache.ofbiz.order.order.OrderItem");

                EntityDynamicView dynamicView = entityFind.makeEntityDynamicView();

                // Add member entities
                dynamicView.addMemberEntity("OI", "org.apache.ofbiz.order.order.OrderItem", null, null, null);
                dynamicView.addMemberEntity("OISG", "org.apache.ofbiz.order.order.OrderItemShipGroup", "OI", false,
                ["orderId": "orderId"]);
                dynamicView.addMemberEntity("OS", "org.apache.ofbiz.order.order.OrderShipment", "OI", true,
                ["orderId": "orderId"]);
                dynamicView.addMemberEntity("S", "org.apache.ofbiz.shipment.shipment.Shipment", "OS", true,
                ["shipmentId": "shipmentId"]);


                dynamicView.addAlias("OI", "orderId");
                dynamicView.addAlias("OI", "orderItemSeqId");
                dynamicView.addAlias("OI", "productId");
                dynamicView.addAlias("S", "shipmentStatusId","statusId",null);
                dynamicView.addAlias("OISG", "facilityId","facilityId",null);
                dynamicView.addAlias("OI", "itemStatusId","statusId",null);


                entityFind.condition("facilityId", facilityId);
                entityFind.condition("itemStatusId", "ITEM_APPROVED");

                // Add filter based on maySplit and cascadeRejectByProduct
                if (maySplit) {
                if (cascadeRejectByProduct) {
                entityFind.condition("productId", productId);
                }
                else {
                entityFind.condition("orderId", orderId);
                entityFind.condition("orderItemSeqId", orderItemSeqId);
                }
                }
                else {
                if (cascadeRejectByProduct) {
                entityFind.condition("product", productId);
                }
                else {
                entityFind.condition("orderId", orderId);
                }
                }

                // Add shipment status condition (common for all cases)
                EntityConditionFactory conditionFactory = entityFind.efi.conditionFactory;

                entityFind.condition(conditionFactory.makeCondition(
                conditionFactory.makeCondition("shipmentStatusId", EntityCondition.ComparisonOperator.IN,
                ["SHIPMENT_INPUT", "SHIPMENT_APPROVED"]),
                EntityCondition.JoinOperator.OR,
                conditionFactory.makeCondition("shipmentStatusId", EntityCondition.ComparisonOperator.EQUALS, null)
                ));

                List&lt;EntityValue&gt; orderItemsToReject = entityFind.list();

                orderItemsToReject.each { itemToReject ->
                ec.service.sync().name("co.hotwax.oms.order.OrderReservationServices.reject#OrderItem")
                .parameter("orderId", itemToReject.orderId)
                .parameter("orderItemSeqId", itemToReject.orderItemSeqId)
                .parameter("rejectionReasonId", rejectionReasonId)
                .parameter("rejectComments", comments)
                .parameter("facilityId", facilityId)
                .parameter("rejectToFacilityId", rejectToFacilityId)
                .parameter("updateQOH", updateQOH)
                .call()
                }
                }
            </script>
        </actions>
    </service>

    <service verb="reject" noun="OrderItem">
        <description>Service to reject an order item with various identification methods and record variance details.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="facilityId" required="true"/>
            <parameter name="rejectToFacilityId" default-value="REJECTED_ITM_PARKING"/>
            <parameter name="recordVariance" default-value="Y"/>
            <parameter name="updateQOH" default-value="false" type="Boolean"/>
            <parameter name="rejectionReasonId" required="true"/>
            <parameter name="rejectComments" />
            <parameter name="shipmentId"/>
            <parameter name="shipmentItemSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="cancelledReservations" type="Map"/>
        </out-parameters>
        <actions>

            <!--            Check for shipment rejection -->
            <if condition="shipmentId &amp;&amp; shipmentItemSeqId">

                <!--Fetch the Shipment record using shipmentId.-->
                <entity-find-one entity-name="org.apache.ofbiz.shipment.shipment.Shipment" value-field="shipment">
                    <field-map field-name="shipmentId"/>
                </entity-find-one>
                <if condition="!shipment">
                    <return error="true" message="Not a valid shipment: Shipment with ${shipmentId} does not exist"/>
                </if>

                <if condition="!shipment.statusId.equals('SHIPMENT_INPUT')">
                    <service-call name="co.hotwax.poorti.FulfillmentServices.reinitialize#Shipment"
                                  in-map="[shipmentId:shipmentId]"/>
                </if>

                <entity-find entity-name="org.apache.ofbiz.shipment.shipment.ShipmentPackageContent" list="shipmentPackageContentList">
                    <econdition field-name="shipmentId"/>
                    <econdition field-name="shipmentItemSeqId"/>
                </entity-find>

                <set field="shipmentPackageContent" from="shipmentPackageContentList[0]"/>

                <!--            delete shipmentContent -->
                <service-call name="delete#org.apache.ofbiz.shipment.shipment.ShipmentPackageContent"
                              in-map="shipmentPackageContent"/>

                <!--            delete shipmentItem -->
                <service-call name="delete#org.apache.ofbiz.shipment.shipment.ShipmentItem"
                              in-map="[shipmentId:shipmentId,shipmentItemSeqId:shipmentItemSeqId]"/>

                <set field="facilityId" from="shipment?.originFacilityId"/>

                <!--Query Order Shipment to get order related details from this shipment-->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderShipment" list="orderShipmentList">
                    <econdition field-name="shipmentId"/>
                    <econdition field-name="shipmentItemSeqId"/>
                    <econdition field-name="orderId"/>
                </entity-find>

                <set field="orderShipment" from="orderShipmentList[0]"/>

                <service-call name="co.hotwax.poorti.FulfillmentServices.update#OrderItemFulfillmentStatus"
                              in-map="[orderId:orderShipment.orderId,orderItemSeqId:orderShipment.orderItemSeqId,fulfillmentStatus:'']"/>

                <!--            delete orderShipment -->
                <service-call name="delete#org.apache.ofbiz.order.order.OrderShipment"
                              in-map="orderShipment"/>
            </if>

            <!--Fetch shipGroupSeqId before processing anything -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" list="currentShipGroup" >
                <econdition field-name="orderId" from="orderId"/>
            </entity-find>

            <set field="shipGroupSeqId" from="currentShipGroup[0].shipGroupSeqId"/>

            <!--1. Cancel Inventory Reservation call cancel#OrderItemShipGrpInvRes -->
            <service-call name="co.hotwax.oms.order.OrderReservationServices.cancel#OrderItemInventoryReservation" in-map="[orderId:orderId,
            orderItemSeqId:orderItemSeqId,shipGroupSeqId:shipGroupSeqId,cancelQuantity:1]"/>

            <!--2. Move to rejected facility-->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="currentShipGroup">
                <field-map field-name="shipGroupSeqId"/>
                <field-map field-name="orderId" />
            </entity-find-one>
            <set field="currentShipGroup.facilityId" from="rejectToFacilityId"/>
            <service-call name="update#org.apache.ofbiz.order.order.OrderItemShipGroup" in-map="currentShipGroup"/>

            <!--3. Call create order facility change-->
            <set field="orderFacilityChangeMap"  type="NewMap" from="[:]"/>
            <set field="orderFacilityChangeMap.orderId" from="orderId"/>
            <set field="orderFacilityChangeMap.facilityId" from="rejectToFacilityId"/>
            <set field="orderFacilityChangeMap.fromFacilityId" from="facilityId"/>
            <set field="orderFacilityChangeMap.shipmentMethodTypeId" value="STANDARD"/>
            <set field="orderFacilityChangeMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="orderFacilityChangeMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="orderFacilityChangeMap.changeReasonEnumId" from="rejectionReasonId"/>
            <set field="orderFacilityChangeMap.changeUserLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <set field="orderFacilityChangeMap.changeDatetime" from="ec.user.nowTimestamp"/>
            <set field="orderFacilityChangeMap.comments" from="rejectComments"/>
            <set field="orderFacilityChangeMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <service-call name="create#co.hotwax.facility.OrderFacilityChange" in-map="orderFacilityChangeMap"/>

            <!--4. createUpdateExternalFulfillmentOrderItem-->
            <set field="createUpdateExternalFulfillmentOrderItemMap"  type="NewMap" from="[:]"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.orderId" from="orderId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.fulfillmentStatus" value="REJECT"/>
            <set field="createUpdateExternalFulfillmentOrderItemMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <service-call name="create#co.hotwax.integration.order.ExternalFulfillmentOrderItem" in-map="createUpdateExternalFulfillmentOrderItemMap"/>

            <!--5. createOrderHistory-->
            <set field="orderHistoryMap"  type="NewMap" from="[:]"/>
            <set field="orderHistoryMap.orderId" from="orderId"/>
            <set field="orderHistoryMap.orderItemSeqId" from="orderItemSeqId"/>
            <set field="orderHistoryMap.shipGroupSeqId" from="currentShipGroup.shipGroupSeqId"/>
            <set field="orderHistoryMap.eventTypeEnumId" from="ITEM_BKD_REJECTED"/>
            <set field="orderHistoryMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <service-call name="create#co.hotwax.customerservice.order.OrderHistory" in-map="orderHistoryMap"/>

            <!--6. Record inventory variance-->
            <entity-find-one entity-name="org.apache.ofbiz.common.enum.Enumeration" value-field="enumMap" cache="true">
                <field-map field-name="enumId" from="rejectionReasonId"/>
            </entity-find-one>

            <set field="enumType" from="enumMap.enumTypeId"/>
            <set field="varianceQuantity" value="0" type="BigDecimal"/>

            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="itemSeqId"/>
            </entity-find-one>

            <if condition="enumType.equals('REPORT_NO_VAR')">
                <return message="Rejection reason is not eligible for setting variance"/>
            </if>

            <if condition="enumType.equals('REPORT_VAR')">
                <set field="varianceQuantity" value="1" type="BigDecimal"/>
            </if>

            <if condition="enumType.equals('REPORT_ALL_VAR')">
                <entity-find-one entity-name="org.apache.ofbiz.product.facility.ProductFacility" value-field="productFacility">
                    <field-map field-name="productId" from="orderItem.productId"/>
                    <field-map field-name="facilityId" from="facilityId"/>
                </entity-find-one>

                <set field="varianceQuantity" from="productFacility.lastInventoryCount" type="BigDecimal"/>
            </if>

            <entity-find entity-name="co.hotwax.oms.product.inventory.ProductFacilityInventoryItemView" list="productFacilityInventoryItemViews">
                <econdition field-name="productId" from="orderItem.productId"/>
                <econdition field-name="facilityId" from="facilityId"/>
                <econdition field-name="availableToPromise" operator="greater" value="0"/>
            </entity-find>

            <set field="productFacilityInventoryItemView" from="productFacilityInventoryItemViews[0]"/>

            <set field="availableToPromiseVar" type="BigDecimal" from="productFacilityInventoryItemView.availableToPromise"/>
            <if condition="varianceQuantity!=null">
                <if condition="availableToPromiseVar >= varianceQuantity ">
                    <then>
                        <set field="availableToPromiseVar" type="BigDecimal" from="varianceQuantity"/>
                        <set field="varianceQuantity" type="BigDecimal" value="0"/>
                    </then>
                    <else>
                        <!--                        Variance is greater than atp, what to do ?  Second pass ? -->
                        <set field="varianceQuantity" type="BigDecimal" from="varianceQuantity.subtract(availableToPromiseVar)"/>
                    </else>
                </if>
            </if>
            <!--Run the code to record variance -->

            <!--                These details go in a map placed inside 'inventoryItemVariances' list -->
            <set field="inventoryItemVariances"  type="NewList" from="[]"/>
            <set field="inventoryItemVarianceMap"  type="NewMap" from="[:]"/>
            <set field="inventoryItemVarianceMap.inventoryItemId" from="productFacilityInventoryItemView.inventoryItemId"/>
            <set field="inventoryItemVarianceMap.varianceReasonId" from="rejectionReasonId"/>
            <set field="inventoryItemVarianceMap.comments" from="rejectComments"/>
            <set field="inventoryItemVarianceMap.userLogin" from="ec.user.getUsername()?:ec.user.getUserId()"/>
            <set field="inventoryItemVarianceMap.availableToPromiseVar" from="availableToPromiseVar.negate()"/>

            <if condition="updateQOH">
                <set field="inventoryItemVarianceMap.quantityOnHandVar" from="availableToPromiseVar.negate()"/>
            </if>

            <script>
                inventoryItemVariances.add(inventoryItemVarianceMap)
            </script>

            <!--                These go in top level Map - createPhysicalInventoryMap -->
            <set field="createPhysicalInventoryMap"  type="NewMap" from="[:]"/>
            <set field="createPhysicalInventoryMap.physicalInventoryDate" from="ec.user.nowTimestamp" />
            <set field="createPhysicalInventoryMap.partyId" from="ec.user.getUsername()?:ec.user.getUserId().partyId" />
            <set field="createPhysicalInventoryMap.inventoryItemVariances" from="inventoryItemVariances" />

            <!--                Call create Physical Inventory -->
            <service-call name="co.hotwax.poorti.FulfillmentServices.create#PhysicalInventory" in-map="createPhysicalInventoryMap" out-map="result"/>

        </actions>
    </service>

    <service verb="increase" noun="FacilityOrderCount">
        <description>
            This service increases the order count for a specific facility on a given date.
            It either updates an existing record for the facility's order count or creates a new record if none exists for the current date.
        </description>
        <in-parameters>
            <parameter name="facilityId" required="true"/>
            <parameter name="count" default-value="1" type="Long"/>
        </in-parameters>
        <actions>
            <script>
                import java.time.format.DateTimeFormatter
                String entryDate = ec.user.nowTimestamp.toLocalDateTime().toLocalDate().format(DateTimeFormatter.ofPattern("yyyy-MM-d"))
            </script>
            <entity-find-one entity-name="co.hotwax.facility.FacilityOrderCount" value-field="facilityOrderCount">
                <field-map field-name="facilityId" from="facilityId"/>
                <field-map field-name="entryDate" from="entryDate"/>
            </entity-find-one>
            <if condition="facilityOrderCount">
                <set field="lastOrderCount" from="facilityOrderCount.lastOrderCount" default-value="0" type="Long"/>
                <set field="count" from="count + lastOrderCount" type="Long"/>
                <service-call name="update#co.hotwax.facility.FacilityOrderCount"
                              in-map="[facilityId: facilityId, entryDate: entryDate, lastOrderCount: count]"/>
                <else>
                    <service-call name="create#co.hotwax.facility.FacilityOrderCount"
                                  in-map="[facilityId: facilityId, entryDate: entryDate, lastOrderCount: count]"/>
                </else>
            </if>
        </actions>
    </service>


    <!--
    * Allocate items to a specific facility within an order.
    * Move items to the appropriate ship group.
    * Perform item reservation.
    * If an item is not on a non-virtual facility, it will throw an error.
    * If an item is already allocated to the given facility, it will return success.
    * Input Parameters:
    * The service accepts the following input parameters:
    * - orderId: The ID of the order for which allocation is being performed.
    * - facilityAllocation: An array of objects, each representing the allocation of items to a specific facility.
    *   Each object contains the following information:
    *  - - facilityId: The ID of the facility to which items are allocated.
    *  - - items: An array of item objects, each with the following details:
    *  - - orderItemSeqId: The sequence ID of the order item.
    *  - - quantity: The quantity of the item to allocate.
    * Here's a sample JSON representation of the input parameters:
    json
        {
            "orderId": "105",
            "externalOrderId": "",
            "facilityAllocation": [
                {
                    "facilityId": "1",
                    "items": [
                        {
                            "orderItemSeqId": "00101",
                            "quantity": 1,
                            "changeReasonEnumId": '',
                            "routingRule": '',
                            "routingGroupId": '',
                            "orderRoutingId": '',
                            "routingRuleId": '',
                            "routingRunId": '',
                            "suggestedShipMethodTypeId": '',
                            "comments": ''
                        },
                        {
                            "orderItemSeqId": "00102",
                            "quantity": 1
                        }
                    ]
                },
                {
                    "facilityId": "10",
                    "items": [
                        {
                            "orderItemSeqId": "00103",
                            "quantity": 1
                        }
                    ]
                }
            ]
        }
    * The service should validate the input parameters,
    * check the item's current facility status, allocate the items to the specified facility, and perform item reservations as necessary.
    * If an item is already allocated to the given facility, it should return a success response,
    * and if an item is on a virtual facility or any other error condition occurs, it should throw an error.
    -->
    <service verb="process" noun="OrderFacilityAllocation" transaction-timeout="120">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="facilityAllocation" type="List" required="true">
                <parameter name="facilityAllocationMap" type="Map" required="true">
                    <parameter name="facilityId" required="true"/>
                    <parameter name="items" type="List" required="true">
                        <parameter name="itemMap" type="Map">
                            <parameter name="orderItemSeqId"/>
                            <parameter name="quantity" type="Integer"/>
                            <parameter name="comments"/>
                        </parameter>
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>

        </out-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader" value-field="orderHeader"/>
            <if condition="!orderHeader">
                <return error="true" message="Order [ID: ${orderId}] not found."/>
            </if>
            <if condition="'ORDER_APPROVED' != orderHeader.statusId">
                <return error="true" message="Order [ID: ${orderId}] not in approved status."/>
            </if>
            <set field="allocatedFacilityIds" from="[] as Set"/>
            <iterate list="facilityAllocation" entry="allocation">
                <set field="facilityId" from="allocation.facilityId"/>
                <set field="toShipGroupSeqId" from="null"/>
                <set field="allocatedItems" from="allocation.items" type="List"/>
                <iterate list="allocatedItems" entry="allocatedItem">
                    <set field="allocatedItem.toShipGroupSeqId" from="toShipGroupSeqId"/>
                    <set field="allocatedItem.facilityId" from="facilityId"/>
                    <set field="allocatedItem.orderId" from="orderId"/>
                    <service-call name="co.hotwax.oms.order.OrderReservationServices.process#OrderItemAllocation"
                                  in-map="allocatedItem" out-map="outMap"/>
                    <if condition="outMap.allocatedShipGroupSeqId">
                        <set field="toShipGroupSeqId" from="outMap.allocatedShipGroupSeqId"/>
                        <script>
                            allocatedFacilityIds.add(facilityId);
                        </script>
                    </if>
                </iterate>
            </iterate>
            <iterate list="allocatedFacilityIds" entry="allocatedFacilityId">
                <service-call name="co.hotwax.oms.order.OrderReservationServices.increase#FacilityOrderCount"
                              in-map="[facilityId: allocatedFacilityId, shipGroupSeqId: shipGroupSeqId]" ignore-error="true"/>
            </iterate>
        </actions>
    </service>
    <service verb="process" noun="OrderItemAllocation">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" default-value="1"/>
            <parameter name="facilityId" required="true"/>
            <parameter name="autoCancelDate" type="Timestamp"/>
            <parameter name="clearAutoCancelDate" type="Boolean" default-value="false"/>
            <parameter name="toShipGroupSeqId"/>
            <parameter name="changeReasonEnumId"/>
            <parameter name="routingRule"/>
            <parameter name="routingGroupId"/>
            <parameter name="orderRoutingId"/>
            <parameter name="routingRuleId"/>
            <parameter name="routingRunId"/>
            <parameter name="suggestedShipMethodTypeId"/>
            <parameter name="comments"/>
        </in-parameters>
        <out-parameters>
            <parameter name="allocatedShipGroupSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem"/>
            <if condition="!orderItem">
                <return error="true" message="Order Item [${orderId}:${orderItemSeqId}] not found"/>
            </if>
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="fromShipGroup">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="shipGroupSeqId" from="orderItem.shipGroupSeqId"/>
            </entity-find-one>
            <!-- If the OrderItem is already allocated at facilityId, do not reallocate.
            Instead, verify if the auto-cancel date scenario applies and update the OrderItem accordingly. -->
            <set field="fromShipGroupSeqId" from="fromShipGroup.shipGroupSeqId"/>
            <if condition="fromShipGroup &amp;&amp; facilityId == fromShipGroup.facilityId">
                <log level="warn" message="Order item [${orderId}:${orderItemSeqId}] already located at facility ${facilityId}."/>
                <if condition="autoCancelDate || clearAutoCancelDate">
                    <set field="serviceInCtx" from="[orderId: orderId, orderItemSeqId: orderItemSeqId]"/>
                    <if condition="clearAutoCancelDate">
                        <set field="serviceInCtx.autoCancelDate" from="null"/>
                        <else-if condition="autoCancelDate">
                            <set field="serviceInCtx.autoCancelDate" from="autoCancelDate"/>
                        </else-if>
                    </if>
                    <service-call name="update#org.apache.ofbiz.order.order.OrderItem"
                                  in-map="serviceInCtx"/>
                </if>
                <return message="Order item [${orderId}:${orderItemSeqId}] already located at facility ${facilityId}."/>
            </if>

            <entity-find-one entity-name="org.apache.ofbiz.product.facility.Facility" value-field="fromFacility" cache="true">
                <field-map field-name="facilityId" from="fromShipGroup.facilityId"/>
            </entity-find-one>
            <!--
                Check if the OrderItem is not at a virtual facility.
                If it's already reserved at a different facility, do not allocate inventory again to prevent double reservation.
            -->
            <service-call name="co.hotwax.oms.common.CommonServices.check#ParentType"
                          in-map="[entityName: 'org.apache.ofbiz.product.facility.FacilityType',
                                primaryKey: 'facilityTypeId',
                                childType: fromFacility?.facilityTypeId,
                                parentTypeField: 'parentTypeId',
                                parentType: 'VIRTUAL_FACILITY']" out-map="outResult"/>
            <if condition="!outResult.hasParentType">
                <return error="true" message="Order Item [${orderId}:${orderItemSeqId}] not on virtual facility location"/>
            </if>
            <entity-find-one entity-name="org.apache.ofbiz.product.facility.Facility" value-field="toFacility" cache="true">
                <field-map field-name="facilityId" from="facilityId"/>
            </entity-find-one>
            <if condition="!toFacility">
                <return error="true" message="Facility [ID: ${facilityId} not found"/>
            </if>
            <!-- If toShipGroupSeqId pass as service in param use it -->
            <if condition="!toShipGroupSeqId">
                <!--
                    Find the OrderItemShipGroup.
                    If the item is allocated to a virtual facility, the find#OrderItemShipGroup service returns the existing ship group sequence ID.
                -->
                <service-call name="co.hotwax.oms.order.OrderServices.find#OrderItemShipGroup"
                          in-map="[orderId: orderId, facilityId: facilityId]" out-map="outMap"/>
                <set field="toShipGroupSeqId" from="outMap.shipGroupSeqId"/>
                <!-- Create a new ship group and copy the fields from the original ship group sequence ID.-->
                <if condition="!toShipGroupSeqId">
                    <set field="serviceInCtx" from="fromShipGroup.getValueMap()" />
                    <script>
                        serviceInCtx.remove("shipGroupSeqId");
                    </script>
                    <set field="serviceInCtx.facilityId" from="facilityId"/>
                    <service-call name="create#org.apache.ofbiz.order.order.OrderItemShipGroup"
                                  in-map="serviceInCtx" out-map="outMap"/>
                    <set field="toShipGroupSeqId" from="outMap.shipGroupSeqId"/>
                </if>
            </if>
            <!-- FIXME: Backward compatibility code start-->
            <service-call name="delete#org.apache.ofbiz.order.order.OrderItemShipGroupAssoc"
                          in-map="[orderId:orderId, orderItemSeqId: orderItemSeqId, shipGroupSeqId: fromShipGroupSeqId]"/>

            <service-call name="create#org.apache.ofbiz.order.order.OrderItemShipGroupAssoc"
                          in-map="[orderId:orderId, orderItemSeqId: orderItemSeqId, shipGroupSeqId: toShipGroupSeqId, quantity: quantity]"/>
            
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderAdjustment" list="orderItemAdjustments" for-update="true">
                <econdition field-name="orderId" from="orderId"/>
                <econdition field-name="orderItemSeqId" from="orderItemSeqId"/>
                <econdition field-name="shipGroupSeqId" from="fromShipGroupSeqId"/>
            </entity-find>
            <iterate list="orderItemAdjustments" entry="orderItemAdjustment">
                <set field="orderItemAdjustment.shipGroupSeqId" from="toShipGroupSeqId"/>
                <entity-update value-field="orderItemAdjustment"/>
            </iterate>
            <!-- FIXME: Backward compatibility code end-->

            <set field="serviceInCtx" from="[orderId: orderId, orderItemSeqId: orderItemSeqId, shipGroupSeqId: toShipGroupSeqId]"/>
            <if condition="autoCancelDate || clearAutoCancelDate">
                <if condition="clearAutoCancelDate">
                    <set field="serviceInCtx.autoCancelDate" from="null"/>
                    <else-if condition="autoCancelDate">
                        <set field="serviceInCtx.autoCancelDate" from="autoCancelDate"/>
                    </else-if>
                </if>
            </if>
            <service-call name="update#org.apache.ofbiz.order.order.OrderItem"
                          in-map="serviceInCtx"/>
            <set field="allocatedShipGroupSeqId" from="toShipGroupSeqId"/>

            <service-call name="co.hotwax.oms.order.OrderReservationServices.create#OrderItemInventoryReservation"
                          in-map="[orderId: orderId, orderItemSeqId:orderItemSeqId, facilityId: facilityId, quantity:quantity ]"/>

            <service-call name="create#co.hotwax.facility.OrderFacilityChange"
                          in-map="context + [fromFacilityId: fromFacility.facilityId, routerUserLogin:ec.user.username, changeDatetime: ec.user.nowTimestamp]"/>
        </actions>
    </service>
</services>