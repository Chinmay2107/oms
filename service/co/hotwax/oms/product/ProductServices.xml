<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="create" noun="ProductAndVariants" transaction-timeout="1800">
        <description>Service to create the virtual and variant products.</description>
        <in-parameters>
            <parameter name="payload" type="Map" required="true">
                <description>The payload containing product and its variants.</description>
            </parameter>
        </in-parameters>
        <actions>
            <!-- Set the productVariants field from the incoming payload map -->
            <set field="productVariants" from="payload.remove('variants')"/>

            <!-- Check if the productId is not null then only create ShopifyShopProduct record -->
            <if condition="payload.productId">
                <!-- Create ShopifyShopProduct record -->
                <service-call name="store#co.hotwax.shopify.ShopifyShopProduct"  in-map="[shopId:payload.shopifyShopProduct.shopId,
                        productId:payload.productId,shopifyProductId:payload.shopifyShopProduct.shopifyProductId]"/>
                <set field="parentProductId" from="payload.productId"/>
                <return/>
            </if>

            <!-- Call the create#VirtualProduct service -->
            <service-call name="co.hotwax.oms.product.ProductServices.create#VirtualProduct"
                    in-map="[productJson:prepareProductCreateOut.productJson]" out-map="createVirtualProductOut" transaction="force-new"/>

            <!-- Set the parentProductId returned from the create#VirtualProduct service -->
            <set field="parentProductId" from="createVirtualProductOut.productId"/>

            <!-- Iterate the productVariants list -->
            <iterate list="productVariants" entry="productVariant">

                <!-- For each product variant call the create#ProductVariant service -->
                <service-call name="co.hotwax.oms.product.ProductServices.create#ProductVariant" in-map="[productVariantJson:productVariant,
                        parentProductId:parentProductId]" transaction="force-new" ignore-error="true"/>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="VirtualProduct" transaction-timeout="1800">
        <description>Service to create virtual product and its shopify shop product record.</description>
        <in-parameters>
            <parameter name="productJson" type="Map" required="true">
                <description>Product json to create the virtual product.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="productId">
                <description>The productId of the created virtual product.</description>
            </parameter>
        </out-parameters>
        <actions>
            <!-- Get the ShopifyShopProduct record and remove it from productJson -->
            <set field="shopifyShopProduct" from="productJson.remove('shopifyShopProduct')"/>

            <!-- Call prepare#ProductCreate service to get the json for creating product -->
            <service-call name="co.hotwax.oms.product.ProductServices.prepare#ProductCreate" in-map="[productJson:productJson]"
                          out-map="prepareProductCreateOut"/>

            <!-- Call create service for Virtual Product -->
            <service-call name="create#org.apache.ofbiz.product.product.Product" in-map="prepareProductCreateOut.productJson"
                    out-map="createProductOut"/>

            <!-- Set the parentProductId -->
            <set field="productId" from="createProductOut.productId"/>

            <!-- Create ShopifyShopProduct record -->
            <service-call name="create#co.hotwax.shopify.ShopifyShopProduct" in-map="[shopId:shopifyShopProduct.shopId,
                    productId:productId,shopifyProductId:shopifyShopProduct.shopifyProductId]" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="ProductVariant" transaction-timeout="1800">
        <description>Service to create Product Variant.</description>
        <in-parameters>
            <parameter name="productVariantJson" type="Map" required="true">
                <description>The product variant json to be created.</description>
            </parameter>
            <parameter name="parentProductId" required="true">
                <description>The parent product id for the variants.</description>
            </parameter>
        </in-parameters>
        <actions>

            <!-- Check if internalName is present, if no return as for variant the internalName is used to
                 uniquely identify the product and if missing then product should not be created. -->
            <if condition="!productVariantJson.internalName">
                <return error="true" message="Either Shopify Product Id or Shopify Product SKU or Barcode is required to create Product"/>
            </if>

            <!-- Check if productId is not null -->
            <if condition="productVariantJson.productId">
                <!-- Create ShopifyShopProduct record -->
                <service-call name="create#co.hotwax.shopify.ShopifyShopProduct" in-map="[shopId:productVariantJson.shopifyShopProduct.shopId,
                        productId:productVariantJson.productId,shopifyProductId:productVariantJson.shopifyShopProduct.shopifyProductId,
                        shopifyInventoryItemId:productVariantJson.shopifyShopProduct.shopifyInventoryItemId]" out-map="context"/>

                <!-- Create ProductAssoc record for the given productVariant and parentProductId -->
                <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc" in-map="[productId:parentProductId,productIdTo:productVariantJson.productId,productAssocTypeId:'PRODUCT_VARIANT']"/>
                <return/>
            </if>

            <!-- Set the shopifyShopProductMap from productVariantJsonMap -->
            <set field="shopifyShopProduct" from="productVariantJson.remove('shopifyShopProduct')"/>

            <!-- Call prepare#ProductCreate for the productVariantJson map -->
            <service-call name="co.hotwax.oms.product.ProductServices.prepare#ProductCreate" in-map="[productJson:productVariantJson]"
                          out-map="prepareProductCreateOut"/>

            <!-- Create Product record for the variant product -->
            <service-call name="create#org.apache.ofbiz.product.product.Product" in-map="prepareProductCreateOut.productJson"
                          out-map="createProductOut"/>

            <!-- Create ProductAssoc record for the variant product -->
            <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc" in-map="[productId:parentProductId,productIdTo:createProductOut.productId,productAssocTypeId:'PRODUCT_VARIANT']"/>

            <!-- Create ShopifyShopProduct record for the variant product -->
            <service-call name="create#co.hotwax.shopify.ShopifyShopProduct" in-map="[shopId:shopifyShopProduct.shopId,
                    productId:createProductOut.productId,shopifyProductId:shopifyShopProduct.shopifyProductId,
                    shopifyInventoryItemId:shopifyShopProduct.shopifyInventoryItemId]" out-map="context"/>
        </actions>
    </service>

    <service verb="prepare" noun="ProductCreate" transaction-timeout="1800">
        <description>Service to create the json map required for creating the product and its related records.</description>
        <in-parameters>
            <parameter name="productJson" type="Map" required="true">
                <description>The input json map for product.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="productJson" type="Map">
                <description>The output json map for the product.</description>
            </parameter>
        </out-parameters>
        <actions>
            <log message="productJson BEFORE prepare create: ${productJson}"/>
            <!-- Set the features list and remove it from productJson -->
            <set field="features" from="productJson.remove('features')"/>

            <!-- Check if features list is not null -->
            <if condition="features">
                <!-- Initialize the featureAppls list -->
                <set field="featureAppls" from="[]"/>

                <!-- Iterate through the features list -->
                <iterate list="features" entry="feature">
                    <!-- Fetch productFeatureType record for productFeatureTypeId -->
                    <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                        <econdition field-name="description" from="feature.productFeatureTypeDesc.trim()"/>
                    </entity-find>

                    <if condition="productFeatureTypes">
                        <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                        <else>
                            <service-call name="create#org.apache.ofbiz.product.feature.ProductFeatureType" in-map="[description:feature.productFeatureTypeDesc.trim()]"
                                          out-map="createProductFeatureTypeOutput" transaction="force-new"/>
                            <set field="productFeatureTypeId" from="createProductFeatureTypeOutput.productFeatureTypeId"/>
                        </else>
                    </if>

                    <!-- Fetch feature record for the productFeatureId -->
                    <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                        <econdition field-name="description" from="feature.featureDesc.trim()"/>
                        <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                    </entity-find>

                    <if condition="productFeatures">
                        <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>
                        <else>
                            <service-call name="create#org.apache.ofbiz.product.feature.ProductFeature" in-map="[productFeatureTypeId:productFeatureTypeId, description:feature.featureDesc.trim()]"
                                          out-map="createProductFeatureOutput" transaction="force-new"/>
                            <set field="productFeatureId" from="createProductFeatureOutput.productFeatureId"/>
                        </else>
                    </if>

                    <set field="featureAppls" from="featureAppls + [productFeatureId:productFeatureId, productFeatureApplTypeId:feature.productFeatureApplTypeId, sequenceNum:feature.sequenceNum]"/>
                </iterate>
                <set field="productJson.featureAppls" from="featureAppls"/>
            </if>
            <!-- Adding log for testing -->
            <log message="productJson AFTER prepare create: ${productJson}"/>
        </actions>
    </service>
    <service verb="update" noun="ProductAndVariants" transaction-timeout="1800">
        <description>This service will update product and create new variants</description>
        <in-parameters>
            <parameter name="payload" type="Map" required="true"/>
        </in-parameters>
        <actions>
            <set field="productVariants" from="payload.remove('variants')"/>
            <set field="shopifyShopProduct" from="payload.remove('shopifyShopProduct')"/>

            <!-- If the productId is null, then create a new product and create a new ShopifyShopProduct record-->
            <if condition="!payload.productId">
                <service-call name="co.hotwax.oms.product.ProductServices.prepare#ProductCreate" in-map="[productJson:payload]" out-map="prepareProductCreateOutput"/>

                <!-- Call the create#VirtualProduct service -->
                <service-call name="co.hotwax.oms.product.ProductServices.create#VirtualProduct"
                        in-map="[productJson:prepareProductCreateOutput.productJson]" out-map="createVirtualProductOut" transaction="force-new"/>

                <!-- Set the parentProductId returned from the create#VirtualProduct service -->
                <set field="parentProductId" from="createVirtualProductOut.parentProductId"/>
                <else>
                    <!-- If the productId is not null, then update the product and ShopifyShopProduct record-->
                    <service-call name="co.hotwax.oms.product.ProductServices.prepare#ProductUpdate" in-map="[productJson:payload]" out-map="prepareProductUpdateOutput"/>
                    <set field="deleteProductFeatureAppls" from="prepareProductUpdateOutput.remove('deleteProductFeatureAppls')"/>
                    <set field="deleteProductKeywords" from="prepareProductUpdateOutput.remove('deleteProductKeywords')"/>
                    <service-call name="update#org.apache.ofbiz.product.product.Product" in-map="prepareProductUpdateOutput.productJson" out-map="updateProductOutput" transaction="force-new"/>
                    <set field="parentProductId" from="payload.productId"/>

                    <!-- If we have deleteProductFeatureAppls in the output, then delete each productFeatureAppl -->
                    <if condition="deleteProductFeatureAppls">
                        <iterate list="deleteProductFeatureAppls" entry="productFeatureAppl">
                            <service-call name="delete#org.apache.ofbiz.product.feature.ProductFeatureAppl" in-map="productFeatureAppl"/>
                        </iterate>
                    </if>
                    <if condition="deleteProductKeywords">
                        <iterate list="deleteProductKeywords" entry="productKeyword">
                            <service-call name="delete#org.apache.ofbiz.product.product.ProductKeyword" in-map="productKeyword"/>
                        </iterate>
                    </if>
                </else>
            </if>
            <iterate list="productVariants" entry="productVariant">
                <service-call name="co.hotwax.oms.product.ProductServices.update#ProductVariant" in-map="[productVariantJson:productVariant, parentProductId:parentProductId]" transaction="force-new" ignore-error="true"/>
            </iterate>
        </actions>
    </service>

    <service verb="prepare" noun="ProductUpdate" transaction-timeout="1800">
        <in-parameters>
            <parameter name="productJson" type="Map" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productJson" type="Map" required="true"/>
            <parameter name="deleteProductFeatureAppls" type="List"/>
            <parameter name="deleteProductKeywords" type="List"/>
        </out-parameters>
        <actions>
            <log message="productJson BEFORE prepare update: ${productJson}"/>
            <!-- Prepare the product features -->
            <set field="features" from="productJson.remove('features')"/>
            <set field="validFeatureAppls" from="[]"/>
            <if condition="features">
                <!-- Initialize the featureAppls list -->
                <set field="featureAppls" from="[]"/>

                <!-- Iterate through the features list -->
                <iterate list="features" entry="feature">
                    <!-- Fetch productFeatureType record for productFeatureTypeId -->
                    <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                        <econdition field-name="description" from="feature.productFeatureTypeDesc.trim()"/>
                    </entity-find>

                    <if condition="productFeatureTypes">
                        <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                        <else>
                            <service-call name="create#org.apache.ofbiz.product.feature.ProductFeatureType" in-map="[description:feature.productFeatureTypeDesc.trim()]"
                                          out-map="createProductFeatureTypeOutput" transaction="force-new"/>
                            <set field="productFeatureTypeId" from="createProductFeatureTypeOutput.productFeatureTypeId"/>
                        </else>
                    </if>

                    <!-- Fetch feature record for the productFeatureId -->
                    <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                        <econdition field-name="description" from="feature.featureDesc.trim()"/>
                        <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                    </entity-find>

                    <if condition="productFeatures">
                        <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureAppl" list="productFeatureAppls" limit="1">
                            <econdition field-name="productId" from="productJson.productId"/>
                            <econdition field-name="productFeatureId" from="productFeatures[0].productFeatureId"/>
                            <econdition field-name="productFeatureApplTypeId" from="feature.productFeatureApplTypeId"/>
                            <date-filter/>
                        </entity-find>
                        <if condition="productFeatureAppls">
                            <set field="validFeatureAppls" from="validFeatureAppls + productFeatureAppls[0]"/>
                            <else>
                                <set field="featureAppls" from="featureAppls + [productFeatureId:productFeatures[0].productFeatureId, productFeatureApplTypeId:feature.productFeatureApplTypeId, sequenceNum:feature.sequenceNum]"/>
                            </else>
                        </if>
                        <else>
                            <service-call name="create#org.apache.ofbiz.product.feature.ProductFeature" in-map="[productFeatureTypeId:productFeatureTypeId, description:feature.featureDesc.trim()]"
                                          out-map="createProductFeatureOutput" transaction="force-new"/>
                            <set field="featureAppls" from="featureAppls + [productFeatureId:createProductFeatureOutput.productFeatureId, productFeatureApplTypeId:feature.productFeatureApplTypeId, sequenceNum:feature.sequenceNum]"/>
                        </else>
                    </if>
                </iterate>
                <if condition="featureAppls">
                    <set field="productJson.featureAppls" from="featureAppls"/>
                </if>
            </if>

            <!-- TODO: Add more comments -->
            <!-- Get the current active ProductFeatureAppl list for the product -->
            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureAppl" list="currentProductFeatureAppls">
                <econdition field-name="productId" from="productJson.productId"/>
                <date-filter/>
            </entity-find>
            <set field="deleteProductFeatureAppls" from="[]"/>
            <iterate list="currentProductFeatureAppls" entry="currentProductFeatureAppl">
                <set field="toBeDeleted" value="true" type="Boolean"/>
                <iterate list="validFeatureAppls" entry="validFeatureAppl">
                    <if condition="currentProductFeatureAppl.productFeatureId == validFeatureAppl.productFeatureId">
                        <set field="toBeDeleted" value="false" type="Boolean"/>
                    </if>
                </iterate>
                <if condition="toBeDeleted">
                    <set field="deleteProductFeatureAppls" from="deleteProductFeatureAppls + currentProductFeatureAppl"/>
                </if>
            </iterate>

            <set field="keywords" from="productJson.remove('keywords')"/>
            <set field="validKeywords" from="[]"/>
            <if condition="keywords">
                <set field="keywordsToAdd" from="[]"/>
                <iterate list="keywords" entry="keyword">
                    <entity-find-one entity-name="org.apache.ofbiz.product.product.ProductKeyword" value-field="productKeyword">
                        <field-map field-name="productId" from="productJson.productId"/>
                        <field-map field-name="keywordTypeId" from="keyword.keywordTypeId"/>
                        <field-map field-name="keyword" from="keyword.keyword"/>
                    </entity-find-one>
                    <if condition="productKeyword">
                        <set field="validKeywords" from="validKeywords + productKeyword"/>
                        <else>
                            <set field="keywordsToAdd" from="keywordsToAdd + keyword"/>
                        </else>
                    </if>
                </iterate>
                <if condition="keywordsToAdd">
                    <set field="productJson.keywords" from="keywordsToAdd"/>
                </if>
            </if>

            <!-- Fetch the current Product Keywords for the productId -->
            <entity-find entity-name="org.apache.ofbiz.product.product.ProductKeyword" list="currentProductKeywords">
                <econdition field-name="productId" from="productJson.productId"/>
            </entity-find>
            <!-- Initialize the deleteProductKeywords list -->
            <set field="deleteProductKeywords" from="[]"/>
            <!-- Iterate the currentProductKeywords list -->
            <iterate list="currentProductKeywords" entry="currentProductKeyword">
                <!-- Initialize toBeDeleted to true -->
                <set field="toBeDeleted" value="true" type="Boolean"/>
                <!-- Iterate the keywords list in the productJson -->
                <iterate list="validKeywords" entry="validKeyword">
                    <if condition="currentProductKeyword.keyword == validKeyword.keyword">
                        <set field="toBeDeleted" value="false" type="Boolean"/>
                    </if>
                </iterate>
                <!-- If toBeDeleted is true then add that keyword map to the deleteProductKeywords list -->
                <if condition="toBeDeleted">
                    <set field="deleteProductKeywords" from="deleteProductKeywords + currentProductKeyword"/>
                </if>
            </iterate>
            <log message="productJson AFTER prepare update: ${productJson}"/>
        </actions>
    </service>

    <service verb="update" noun="ProductVariant" transaction-timeout="1800">
        <description>This service will update a product variant</description>
        <in-parameters>
            <parameter name="productVariantJson" type="Map" required="true"/>
            <parameter name="parentProductId" required="true"/>
        </in-parameters>
        <actions>

            <!-- Check if internalName is present, if no return as for variant the internalName is used to
                 uniquely identify the product and if missing then product should not be created. -->
            <if condition="!productVariantJson.internalName">
                <return error="true" message="Either Shopify Product Id or Shopify Product SKU or Barcode is required to create Product"/>
            </if>

            <set field="shopifyShopProduct" from="productVariantJson.remove('shopifyShopProduct')"/>
            <if condition="!productVariantJson.productId">
                <service-call name="co.hotwax.oms.product.ProductServices.prepare#ProductCreate" in-map="[productJson:productVariantJson]" out-map="prepareProductCreateOutput"/>
                <service-call name="create#org.apache.ofbiz.product.product.Product" in-map="prepareProductCreateOutput.productJson" out-map="createProductOutput"/>
                <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc" in-map="[productIdTo:createProductOutput.productId, productId:parentProductId, productAssocTypeId:'PRODUCT_VARIANT', fromDate:ec.user.nowTimestamp]"/>
                <service-call name="create#co.hotwax.shopify.ShopifyShopProduct" in-map="[productId:parentProductId, shopId:shopifyShopProduct.shopId, shopifyShopProductId:shopifyShopProduct.shopifyShopProductId]"/>
                <else>
                    <service-call name="co.hotwax.oms.product.ProductServices.prepare#ProductUpdate" in-map="[productJson:productVariantJson]" out-map="prepareProductUpdateOutput"/>
                    <set field="deleteProductFeatureAppls" from="prepareProductUpdateOutput.remove('deleteProductFeatureAppls')"/>
                    <service-call name="update#org.apache.ofbiz.product.product.Product" in-map="prepareProductUpdateOutput.productJson" out-map="updateProductOutput"/>

                    <!-- Identify if parent product and productVariantJson.productId are already associated in ProductAssoc entity-->
                    <entity-find entity-name="org.apache.ofbiz.product.product.ProductAssoc" list="productAssocs" limit="1">
                        <econdition field-name="productId" from="parentProductId"/>
                        <econdition field-name="productIdTo" from="productVariantJson.productId"/>
                        <econdition field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
                        <date-filter/>
                    </entity-find>
                    <!-- If not then create a new ProductAssoc record -->
                    <if condition="!productAssocs">
                        <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc" in-map="[productIdTo:productVariantJson.productId, productId:parentProductId, productAssocTypeId:'PRODUCT_VARIANT', fromDate:ec.user.nowTimestamp]"/>
                    </if>
                    <service-call name="update#co.hotwax.shopify.ShopifyShopProduct" in-map="[productId:productVariantJson.productId, shopId:shopifyShopProduct.shopId, shopifyProductId:shopifyShopProduct.shopifyProductId]"/>
                    <!-- If we have deleteProductFeatureAppls in the output, then delete each productFeatureAppl -->
                    <if condition="deleteProductFeatureAppls">
                        <iterate list="deleteProductFeatureAppls" entry="productFeatureAppl">
                            <service-call name="delete#org.apache.ofbiz.product.feature.ProductFeatureAppl" in-map="productFeatureAppl"/>
                        </iterate>
                    </if>
                </else>
            </if>
        </actions>
    </service>
</services>